<?php
use Drupal\Core\Access\AccessResult;
use \Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\group\Entity\Group;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;
use \Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\ContentEntityInterface;

// use Drupal\scitalk_base\ScitalkServices\ReferenceIDGeneratorInterface;
use Drupal\scitalk_base\Plugin\Field\SciTalkPrefixedTalkNumberList;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function scitalk_base_theme($existing, $type, $theme, $path) {
  return [
    'scitalk_social_media_share_block' => [
      'variables' => ['title' => ''],
      'template' => 'block--scitalk-social-media-share'
    ],
    'scitalk_citations_block' => [
      'variables' => [
        'title' => '',
        'bibtex_title' => '',
        'talk_number' => '',
        'talk_date' => '',
        'talk_date_formatted' => '',
        'speakers' => [],
        'doi' => '',
        'url' => '',
        'language' => '',
        'site_name' => '',
        'year' => '',
        'month' => '',
        'keywords' => '',
        'publisher' => '',
        'repository' => '',
        'talk_prefix' => '',
        'persistent_url' => '',
        'bibtex_note' => '',
        'scitalk_prefixed_talk_number' => '' //calculated field for talk numbers
      ],
      'template' => 'block--scitalk-citations'
    ],
  ];
}

/**
 * Implements hook_entity_bundle_field_info
 */
function scitalk_base_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  //create computed field to display talk numbers prefixed with a source repository predefined talk prefix
  if ($entity_type->id() == 'node' && in_array($bundle, ['talk'])) {
    $fields['scitalk_prefixed_talk_number'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Prefixed Talk Number'))
      ->setDescription(t('Talk Number prefixed with an Institution specific prefix.'))
      ->setComputed(TRUE)
      ->setDefaultValue(NULL)
      ->setClass(SciTalkPrefixedTalkNumberList::class)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -1,
        'region' => 'disabled',
        'type' => 'string',
      ]);

    return $fields;
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter
 */
function scitalk_base_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  //add Unique constraints for fied field_talk_number in Talks and field_collection_number in taxonomies Series and Collection
  if ($bundle == 'talk') {
    if (isset($fields['field_talk_number'])) {
      // Use the ID as defined in the annotation of the constraint definition
      $fields['field_talk_number']->addConstraint('UniqueTalkNumber', []);
    }
  }
  else if ($bundle == 'collection') {  //Fires for any entity whose bundle is set to 'collection'
    if (isset($fields['field_collection_number'])) {
      $fields['field_collection_number']->addConstraint('UniqueCollectionNumber');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave()
 */
function scitalk_base_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {

  $nodetype = $entity->getType();
  if ($nodetype == 'collection' || $nodetype == 'talk') {

    //collections have collection_number so create a collection number for them if none exists
    if ($entity->getType() == 'collection') {
      if ($entity->isNew()) {
        $input_coll_number = $entity->get('field_collection_number')->value ?? '';
        if (empty($input_coll_number)) {
          $idGenerator = \Drupal::service('scitalk_base.reference_id_generator');
          $collection_number = $idGenerator->generateReferenceId($entity);
          $entity->set('field_collection_number', $collection_number);
        }
      }
    }


    if ($entity->getType() == 'talk') {
      //when creating a new Talk, if there is no talk number in the entity yet, then create one and assign it to the field.
      if ($entity->isNew()) {
        $entity_talk_number = $entity->field_talk_number->value ?? '';
        if (empty($entity_talk_number)) {
          $idGenerator = \Drupal::service('scitalk_base.reference_id_generator');

          //call service to generate talk id:
          $talk_num = $idGenerator->generateReferenceId($entity);
          //add it to the entity:
          $entity->set('field_talk_number', $talk_num);
        }
      }
      else {
        if (_scitalk_base_use_doi($entity)) {
          //when updating check if the talk has a DOI: if not then create it else update it
          $talk_doi = $entity->field_talk_doi->value ?? '';
          $doi = \Drupal::service('scitalk_base.datacite_dois');
          if (empty($talk_doi)) {
            $doi_id = $doi->create($entity);
            $entity->set('field_talk_doi', $doi_id);
          }
          else {
            $doi_id = $doi->update($entity);
          }
        }
      }

      $academic_year = \Drupal::service('scitalk_base.talk_academic_year');
      $academic_year_tid = $academic_year->get($entity);
      $entity->set('field_academic_year', $academic_year_tid);
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_insert()
 */
function scitalk_base_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
  $scivideos_integrate = _scitalk_base_scivideos_integrate();

  //if the talk is part of a Collection then update the Collection stats (number of talks, latest talk)
  if ($entity->getType() == 'talk') {
    $collectionTalksStats = \Drupal::service('scitalk_base.talks_in_collection_stats');
    $collectionTalksStats->update($entity);

    //create this Talk in SciVideos
    if ($scivideos_integrate) {
      $scivideo_talk = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_talk->addTalk($entity);
    }
  }

  //if the Collections is part of another Collection then update the parent Collection stats (number of talks, latest talk)
  if ($entity->getType() == 'collection') {
    $subCollectionsStats = \Drupal::service('scitalk_base.collection_children_stats');
    $subCollectionsStats->update($entity);

    //create this Collection in SciVideos
    if ($scivideos_integrate) {
      $scivideo_collection = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_collection->addCollection($entity);
    }
  }

  if (_scitalk_base_use_doi($entity)) {
    //when creating a new Talk, create a DOI
    $talk_doi = $entity->field_talk_doi->value ?? '';
    if (empty($talk_doi)) {
      $doi = \Drupal::service('scitalk_base.datacite_dois');
      $doi_id = $doi->create($entity);

      $entity->set('field_talk_doi', $doi_id);
      $entity->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update()
 */
function scitalk_base_node_update(\Drupal\Core\Entity\EntityInterface $entity) {
  $scivideos_integrate = _scitalk_base_scivideos_integrate();

  //if the talk is part of a Collection then update the Collection stats (number of talks, latest talk)
  if ($entity->getType() == 'talk') {
    $collectionTalksStats = \Drupal::service('scitalk_base.talks_in_collection_stats');
    $collectionTalksStats->update($entity);

    if ($scivideos_integrate) {
      $scivideo_talk = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_talk->updateTalk($entity);
    }
  }

  //if the Collections is part of another Collection then update the parent Collection stats (number of talks, latest talk)
  if ($entity->getType() == 'collection') {
    $subCollectionsStats = \Drupal::service('scitalk_base.collection_children_stats');
    $subCollectionsStats->update($entity);

    //update this Collection in SciVideos
    if ($scivideos_integrate) {
      $scivideo_collection = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_collection->updateCollection($entity);
    }
  }

  if ($entity->getType() == 'speaker_profile') {
    //update this Speaker Profile in SciVideos
    if ($scivideos_integrate) {
      $scivideo_speaker_profile = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_speaker_profile->updateSpeakerProfile($entity);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete()
 */
function scitalk_base_node_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $scivideos_integrate = _scitalk_base_scivideos_integrate();

  if ($entity->getType() == 'talk') {

    //if the talk is part of a Collection then update the Collection stats (number of talks, latest talk)
    $collectionTalksStats = \Drupal::service('scitalk_base.talks_in_collection_stats');
    $collectionTalksStats->update($entity);

    if (_scitalk_base_use_doi($entity)) {
      //when deleting a Talk, try to delete its DOI from remote
      $talk_doi = $entity->field_talk_doi->value ?? '';
      if (!empty($talk_doi)) {
        $doi = \Drupal::service('scitalk_base.datacite_dois');
        $doi->delete($talk_doi);
      }
    }

    if ($scivideos_integrate) {
      $scivideo_talk = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_talk->deleteTalk($entity);
    }

    //delete the Talk media and attachments;
    _delete_talk_media($entity);
  }

  //if the Collections is part of another Collection then update the parent Collection stats (number of talks, latest talk)
  if ($entity->getType() == 'collection') {
    $subCollectionsStats = \Drupal::service('scitalk_base.collection_children_stats');
    $subCollectionsStats->update($entity);

    //delete this Collection in SciVideos
    if ($scivideos_integrate) {
      $scivideo_collection = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_collection->deleteCollection($entity);
    }
  }

  if ($entity->getType() == 'speaker_profile') {
    //try to delete this Speaker Profile in SciVideos
    if ($scivideos_integrate) {
      $scivideo_speaker_profile = \Drupal::service('scitalk_base.scivideos_integrate');
      $scivideo_speaker_profile->deleteSpeakerProfile($entity);
    }
  }
}

/**
 * Implements hook_views_query_alter()
 */
function scitalk_base_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  /* Alter the collection view sort order based on the value of the sort order field on this collection type */
  if (($view->id() == 'scitalk_talks_in_collection' || $view->id() == 'scitalk_collection_children')
    && (in_array($view->current_display, ['scitalk_talk_by_collection_block', 'card_view', 'attachment_1', 'attachment_2']))
    && (!empty($view->args))
  ) {
    $collection_node = Node::load($view->args[0]);
    $collection_type_field = $collection_node->get('field_collection_type')->getValue();
    $collection_type_tid = $collection_type_field[0]['target_id'] ?? 0;
    $collection_type_term = Term::load($collection_type_tid);
    if (isset($collection_type_term->field_sort_order)) {
      $collection_type_sort = $collection_type_term->get('field_sort_order')->getValue();
      $collection_type_sort_value = $collection_type_sort[0]['value'] ?? 'date_asc';
    }
    else {
      $collection_type_sort_value = 'date_asc';
    }

    //find the talk date sort field
    $talk_date_sort_field = array_filter($query->orderby, function ($sort_field) {
      return $sort_field['field'] == 'node__field_talk_date_field_talk_date_value';
    });

    //then set the sort direction to it
    if (!empty($talk_date_sort_field)) {
      $field_idx = array_keys($talk_date_sort_field);
      $field_idx_val = current($field_idx);
      $query->orderby[$field_idx_val]['direction'] = $collection_type_sort_value == 'date_asc' ? "ASC" : "DESC";
    }

    // /* Descending is the default on the view so we only need to alter this if the value is ascending */
    // if ($collection_type_sort_value == 'date_asc') {
    //   $query->orderby[0]['direction'] = "ASC";
    // }
  }
  elseif (($view->id() == 'scitalk_collections') && (in_array($view->current_display, ['card_view', 'attachment_1', 'attachment_2']))) {
    $collection_type_tid = $view->exposed_data['field_collection_type_target_id'];
    $collection_type_term = Term::load($collection_type_tid);
    if (isset($collection_type_term)) {
      $name = $collection_type_term->get('name')->getValue();
      $name = $collection_type_term->name->value ?? '';

      //for Series increase the items per page to display and change the sort order to be by collection number
      if ($name == 'Series') {
        $view->setItemsPerPage(0);

        //add collection number as a sort field and sort by it
        $query->addOrderBy('node__field_collection_number', 'field_collection_number_value', 'ASC');
      }
    }
  }

  if ($view->id() == 'scitalk_search_collections') {
    $show_collections_with_no_talks = $view->exposed_data['number_of_children'] ?? FALSE;
    if ($show_collections_with_no_talks) {
      foreach ($query->getWhere() as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (!empty($condition) && $condition[0] == 'number_of_children') {
            // change where clause to query >= 0
            $condition = [
              'number_of_children',
              0,
              '>='
            ];
            // $condition = [
            //   'field' => 'number_of_children',
            //   'value' => 0,
            //   'operator' => '>=',
            // ];
          }
        }
      }
    }
  }
}
/**
 * Implements hook_form_alter().
 */
function scitalk_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach JavaScript library to speaker node forms
  if (($form_id == 'node_speaker_profile_form') ||
    ($form_id == 'node_speaker_profile_edit_form') ||
    ($form_id == 'node_talk_form')) {
    // Autofills Display name with First name + Last name
    $form['#attached']['library'][] = 'scitalk_base/speaker_autofill';
  }

  // Alter speaker profile form to add help text to the display name (title) field
  if (($form_id == 'node_speaker_profile_form') ||
    ($form_id == 'node_speaker_profile_edit_form')) {
    $form['title']['widget'][0]['value']['#description'] = t('Name to be used for display on the site. May be different from first name + last name.  This name will be used for display across the site and as the title for the Speaker page.');
  }

  // Alter views exposed form
  if ($form_id == 'views_exposed_form') {

    $view = $form_state->getStorage('view');
    $view_id = $view['view']->id();
    $view_display = $view['display']['id'];

    // Alter exposed form for advanced search views
    $exposedInput = $form_state->getUserInput();

    // Remove relevance sort option if there are no fulltext keywords
    // Set what should be the default sort
    if ($view['view']->id() == 'scitalk_search_collections') {
      $default_sort = 'field_collection_date_DESC';
    }
    else {
      $default_sort = 'field_talk_date_1_DESC';
    }

    if ((($view_id == "scitalk_advanced_search") &&
      (empty($exposedInput['text']) && empty($exposedInput['speaker']))) ||
      (($view_id == "scitalk_search_collections") &&
        (empty($exposedInput['collection_text']) && empty($exposedInput['collection_title'])))
    ) {

      // Remove the relvance option
      // This should be ignored anyway if there are no fulltext keywords.
      unset($form['sort_bef_combine']['#options']['search_api_relevance_DESC']);
      // Set created descending as the default
      $form['sort_bef_combine']["#default_value"] = $default_sort;
    }

    $view_machine_names = [
      'scitalk_advanced_search',
      'scitalk_search_collections'
    ];


    // In advanced search form, convert Source Repository field to dropdown
    // Set the correct field id for this view
    if ($view['view']->id() == 'scitalk_search_collections') {
      $field_id = 'collection_source';
    }
    else {
      $field_id = 'source';
    }

    if ((in_array($view['view']->id(), $view_machine_names)) &&
      ($view_display != 'basic_search')) {

      // Get all the groups
      $query = \Drupal::entityQuery('group')
        ->condition('type', 'source_repository');
      $group_ids = $query->accessCheck(TRUE)->execute();
      $group_options = ['' => 'All'];
      $group_storage = \Drupal::entityTypeManager()->getStorage('group');
      $groups = $group_storage->loadMultiple($group_ids);

      if (count($groups) > 1) {
        // Create the options array with the group id and group name
        foreach ($groups as $id => $group) {
          $group_title = $group->get('label')->getValue();
          $group_options[$group_title[0]['value']] = $group_title[0]['value'];
        }

        // Convert this field to a select field
        $form[$field_id]['#default_value'] = 'All';

        $form[$field_id]['#type'] = 'select';
        $form[$field_id]['#options'] = $group_options;

        // Unset the size value so it doesn't display as a textfield
        unset($form[$field_id]['#size']);
      }
      else {
        $form[$field_id]['#access'] = FALSE;
      }
    }

    // Alter Talks in Collection view to hide academic year filter if there
    // Is only one value.
    if (($view_id == 'scitalk_talks_in_collection') && ($view_display == 'card_view')) {
      $academic_year_options = count($form['field_academic_year_target_id']['#options']);
      if ($academic_year_options <= 1) {
        unset($form['field_academic_year_target_id']);
        unset($form['field_academic_year_target_id_collapsible']);
      }
    }

    // convert number_of_children field to a single checkbox
    if ($view['view']->id() == 'scitalk_search_collections') {
      $field_id = 'number_of_children';
      $show_collections_with_no_talks = $exposedInput['number_of_children'] ?? 0;

      $form[$field_id] = [
        '#type' => 'checkbox',
        '#default_value' =>  (bool) $show_collections_with_no_talks,
        '#value' => $show_collections_with_no_talks,
      ];
    }
  }

  //check whether these 2 entities (Collection and Speaker Profile) can be deleted from SciVideos. If not then don't allow deletion from local site either
  $validate_delete_forms = ['node_collection_delete_form', 'node_speaker_profile_delete_form'];
  if (in_array($form_id, $validate_delete_forms)) {
    $form['#validate'][] = '_scitalk_base_delete_entity_validate';
  }

  // disable editing for a selected fields list when the content has been created from a Feed
  $feeds_check_form = ['node_talk_edit_form', 'node_collection_edit_form'];  //, 'node_speaker_profile_edit_form'
  if (in_array($form_id, $feeds_check_form)) {
    $form['#attached']['library'][] = 'scitalk_base/scitalk_base_feeds';
    $entity = $form_state->getFormObject()->getEntity();
    $feed = $entity->get("feeds_item")?->getValue() ?? null;
    $from_feed = !empty($feed);
    // disable the skip feeds update when content was not created from a feed:
    if (!$from_feed) {
      $form['field_skip_feeds_updates']['widget']['value']['#attributes']['disabled'] = 'disabled';
    }
    else {
      $readonly_fields = [];
      $readonly_valued_fields = [];
      if ($form_id == 'node_talk_edit_form') {
        $readonly_fields = ['field_talk_abstract'];
        $readonly_valued_fields = ['title', 'field_talk_speakers_text'];
        $form['field_talk_speaker_profile']['widget']['#attributes']['disabled'] = 'disabled';
      }
      elseif ($form_id == 'node_collection_edit_form') {
        $readonly_fields = []; //['field_collection_description'];
        $readonly_valued_fields = ['title'];

        // // disable the whole field wrapper for organizers, this will also prevent adding more fields
        // $form['field_collection_organizers']['#disabled'] = true;
        // foreach ($form['field_collection_organizers']['widget'] as $delta => &$org) {
        //   // show readonly cursor for the input:
        //   if (is_int($delta) && is_array($org)) {
        //     $org['target_id']['#attributes']['class'][] = 'readonly_field';
        //   }
        // }
      }

      foreach ($readonly_fields as $field) {
        $form[$field]['widget'][0]['#attributes']['readonly'] = 'readonly';
        $form[$field]['widget'][0]['#attributes']['class'][] = 'readonly_field';
      }
      foreach ($readonly_valued_fields as $field) {
        $form[$field]['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
        $form[$field]['widget'][0]['value']['#attributes']['class'][] = 'readonly_field';
      }
    }
  }
}

//check whether to create/update DOIs for this type of entity Talk
function _scitalk_base_use_doi(\Drupal\Core\Entity\EntityInterface $entity) {
  $config = \Drupal::config('scitalk_base.settings');
  $doi_enabled = $config->get('use_doi');

  //if DOI config is not enabled then no
  if (!$doi_enabled) {
    return FALSE;
  }

  //if DOI config is on then check if this Talk type is configured to create DOIs
  $create_doi_for_this_talk_type = FALSE;
  $talk_type = $entity->field_talk_type->target_id ?? 0;
  if (!empty($talk_type)) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($talk_type);
    $create_doi_for_this_talk_type = $term->field_create_doi->value ?? FALSE;
  }

  return $create_doi_for_this_talk_type;
}

//check whether integration with SciVideos is enabled
function _scitalk_base_scivideos_integrate() {
  $config = \Drupal::config('scitalk_base.settings');
  $integrate = $config->get('enable_scivideos_integrate');
  return $integrate;
}

//check whether the entity can be deleted from SciVideos
function _scitalk_base_delete_entity_validate(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $scivideos_integrate = _scitalk_base_scivideos_integrate();
  if ($scivideos_integrate) {
    $scivideos_service = \Drupal::service('scitalk_base.scivideos_integrate');
    $form_id = $form_state->getValue('form_id');
    if ($form_id == 'node_collection_delete_form') {

      //get stats from SciVideos:
      $stats = $scivideos_service->getCollectionChildrenStats($entity);
      list('number_of_talks' => $number_of_talks, 'number_of_subcollections' => $number_of_subcollections, 'title' => $title) = $stats;

      // //get stats from local site
      // $number_of_talks = $entity->field_collection_number_of_talks->value ?? 0;
      // $number_of_subcollections = $entity->field_collection_number_children->value ?? 0;
      // $title = $entity->title->value ?? 'This Collection';

      if ($number_of_talks > 0) {
        $talk_txt = $number_of_talks == 1 ? "there is {$number_of_talks} talk" : "there are {$number_of_talks} talks";
        $form_state->setError($form, "'{$title}' cannot be deleted since {$talk_txt} as part of this collection in SciVideos.");
      }
      if ($number_of_subcollections > 0) {
        $coll_txt = $number_of_subcollections == 1 ? "there is {$number_of_subcollections} sub-collection" : "there are {$number_of_subcollections} sub-collections";
        $form_state->setError($form, "'{$title}' cannot be deleted since {$coll_txt} as part of the collection in SciVideos.");
      }

      //query from SciVideos:
      // if ($number_of_talks = $scivideos_service->getNumberOfTalksUnderCollection($entity)){
      //   $form_state->setError($form, "This Collection cannot be deleted since it contains {$number_of_talks} Talk(s) in SciVideos.");
      // }
      // if ($number_of_subcollections = $scivideos_service->getNumberOfCollectonSubCollections($entity)){
      //   ksm($number_of_subcollections);
      //   $form_state->setError($form, "This Collection cannot be deleted since it contains {$number_of_subcollections} Sub-Collections(s) in SciVideos.");
      // }
    }
    elseif ($form_id == 'node_speaker_profile_delete_form') {
      // //get talks for a Speaker from the local site
      // if ($number_of_talks = $scivideos_service->getNumberOfTalksForSpeakerLocalSite($entity)){
      //   $talk_txt = $number_of_talks . ($number_of_talks == 1 ? " talk" : " talks");
      //   $form_state->setError($form, "This Speaker Profile cannot be deleted since it is attached to {$talk_txt}.");
      // }

      //query from SciVideos:
      if ($number_of_talks = $scivideos_service->getNumberOfTalksForSpeakerInSciVideos($entity)) {
        $talk_txt = $number_of_talks . ($number_of_talks == 1 ? " talk" : " talks");
        $form_state->setError($form, "This Speaker Profile cannot be deleted since it is attached to {$talk_txt} in SciVideos.");
      }
    }
  }
}

function _delete_talk_media(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getType() == 'talk') {
    // delete the Talk Video media
    $video_target_id = $entity->get('field_talk_video')->target_id ?? 0;
    $video_media_entity = \Drupal::entityTypeManager()->getStorage('media')->load($video_target_id);
    $url = $entity->toUrl('canonical', ['absolute' => TRUE])->toString();
    if ($video_media_entity) {
      $usage = _find_media_usages(($video_media_entity->id()));
      // if (count($usage) == 1 && current($usage) == $url) {
      if (count($usage) == 0) {
        $video_media_entity->delete();
      }
    }

    // now find this Talk attachments and delete them if not used anywhere else
    $attachments = $entity->get("field_talk_attachments")->getValue() ?? [];
    foreach ($attachments as $att) {
        $attached_media = \Drupal::entityTypeManager()->getStorage('media')->load($att['target_id']);
        $usage = _find_media_usages(($attached_media->id()));
        // at this stage the talk has been deleted so the attachment if it was unique, should not be used anywhere else
        if (count($usage) == 0) {
            $attached_media->delete();
        }
    }
  }
}

function _find_media_usages(int $media_id) {
    $urls = [];
    $entityFieldManager = \Drupal::service('entity_field.manager');
    $bundleInfo = \Drupal::service('entity_type.bundle.info');
    $entityTypes = \Drupal::entityTypeManager()->getDefinitions();

    foreach ($entityTypes as $entity_type_id => $definition) {
      if (!\in_array(ContentEntityInterface::class, class_implements($definition->getClass()))) {
        continue;
      }
      $bundles = $bundleInfo->getBundleInfo($entity_type_id);
      foreach (array_keys($bundles) as $bundle) {
        $fields = $entityFieldManager->getFieldDefinitions($entity_type_id, $bundle);
        foreach ($fields as $field_definition) {
          if (
            $field_definition->getType() === 'entity_reference'
            && $field_definition->getSetting('target_type') === 'media'
          ) {
            $field_name = $field_definition->getName();
            $ids = \Drupal::entityQuery($entity_type_id)
              ->accessCheck(TRUE)
              ->condition($field_name . '.target_id', $media_id)
              ->execute();
            if ($ids) {
              $entities = \Drupal::entityTypeManager()->getStorage($entity_type_id)->loadMultiple($ids);
              foreach ($entities as $entity) {
                if ($entity->hasLinkTemplate('canonical')) {
                  $urls[] = $entity->toUrl('canonical', ['absolute' => TRUE])->toString();
                }
              }
            }
          }
        }
      }
    }
    return array_unique($urls);
  }

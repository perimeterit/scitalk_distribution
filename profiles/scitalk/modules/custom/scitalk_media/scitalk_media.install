<?php

use Drupal\Core\Config\FileStorage;
Use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\File\FileExists;

/**
 * @file
 * Install, uninstall and update hooks for Media entity Scitalk module.
 */

/**
 * Implements hook_install().
 */
function scitalk_media_install() {
  $source = \Drupal::service('extension.path.resolver')->getPath('module', 'scitalk_media') . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  //file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  //$files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  $files = \Drupal::service('file_system')->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // When reinstalling the media module we don't want to copy the icons when
    // they already exist. The icons could be replaced (by a contrib module or
    // manually), so we don't want to replace the existing files. Removing the
    // files when we uninstall could also be a problem if the files are
    // referenced somewhere else. Since showing an error that it was not
    // possible to copy the files is also confusing, we silently do nothing.
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      // \Drupal::service('file_system')->copy($file->uri, $destination, FileSystemInterface::EXISTS_ERROR);
      \Drupal::service('file_system')->copy($file->uri, $destination, FileExists::Error);
    }
  }
}

/**
 * Implements hook_requirements().
 */
function scitalk_media_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    $destination = \Drupal::config('media.settings')->get('icon_base_uri');
    \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
    $is_writable = is_writable($destination);
    $is_directory = is_dir($destination);
    if (!$is_writable || !$is_directory) {
      if (!$is_directory) {
        $error = t('The directory %directory does not exist.', ['%directory' => $destination]);
      }
      else {
        $error = t('The directory %directory is not writable.', ['%directory' => $destination]);
      }
      $description = t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
      if (!empty($error)) {
        $description = $error . ' ' . $description;
        $requirements['scitalk_media']['description'] = $description;
        $requirements['scitalk_media']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 *  Implements hook_update_N()
 *  this update creates DOI media type
 */
function scitalk_media_update_8101(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'scitalk_media') . '/config/install';
  $source      = new FileStorage($config_path);

    //create DOI media type
    $media_type_files = $source->listAll('media.type');
    $media_type = \Drupal::entityTypeManager()->getStorage('media_type');
    foreach ($media_type_files as $media_type_yml) {
      $media_type_id = str_replace('media.type.','',$media_type_yml);
      if (!$media_type->load($media_type_id)) 
      {
        $media_type_yml = $source->read($media_type_yml);
        $media_type->create($media_type_yml)->save();
        \Drupal::logger('scitalk_media')->notice('Create media type for '.  $media_type_id);
      }
    }

  //save field storages
  $field_storage_files = $source->listAll('field.storage');
  $storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_files as $field_storage_yml) {
    $field_storage_id = str_replace('field.storage.','',$field_storage_yml);
    if (!$storage_config->load($field_storage_id)) 
    {
      $storage_config_yml = $source->read($field_storage_yml);
      $storage_config->create($storage_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field storage: '.  $field_storage_id);
    }
  }

  //create fields
  $field_files = $source->listAll('field.field.media');
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_files as $field_yml) {
    $field_id = str_replace('field.field.','',$field_yml);
    if (!$field_config->load($field_id)) 
    {
      $field_config_yml = $source->read($field_yml);
      $field_config->create($field_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field: '.  $field_id);
    }
  }


  //create entity form
  $entity_form_files = $source->listAll('core.entity_form_display.media');
  $entity_form = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  foreach ($entity_form_files as $entity_form_yml) {
    $entity_form_id = str_replace('core.entity_form_display.','',$entity_form_yml); 
    $org_entity_form = $entity_form->load($entity_form_id);
    if (empty($org_entity_form))
    {
      $form_display_yml = $source->read($entity_form_yml);
      $entity_form->create($form_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create form: '.  $entity_form_id);
    }
  }

  //create entity views
  $entity_view_files = $source->listAll('core.entity_view_display.media');
  $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  foreach ($entity_view_files as $view_yml) {
    $view_display_id = str_replace('core.entity_view_display.','',$view_yml); 
    $org_view_display = $view_display->load($view_display_id);
    if (empty($org_view_display))
    {
      $view_display_yml = $source->read($view_yml);
      $view_display->create($view_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create view display: '.  $view_display_id);
    }

  }
}

/**
 *  create new media type Scitalk Transcription, create search for DOI, Arxiv, Transcription
 */
function scitalk_media_update_8102() {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'scitalk_media') . '/config/install';
  $source      = new FileStorage($config_path);

    //create DOI media type
    $media_type_files = $source->listAll('media.type');
    $media_type = \Drupal::entityTypeManager()->getStorage('media_type');
    foreach ($media_type_files as $media_type_yml) {
      $media_type_id = str_replace('media.type.','',$media_type_yml);
      if (!$media_type->load($media_type_id)) 
      {
        $media_type_yml = $source->read($media_type_yml);
        $media_type->create($media_type_yml)->save();
        \Drupal::logger('scitalk_media')->notice('Create media type for '.  $media_type_id);
      }
    }

  //save field storages
  $field_storage_files = $source->listAll('field.storage');
  $storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_files as $field_storage_yml) {
    $field_storage_id = str_replace('field.storage.','',$field_storage_yml);
    if (!$storage_config->load($field_storage_id)) 
    {
      $storage_config_yml = $source->read($field_storage_yml);
      $storage_config->create($storage_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field storage: '.  $field_storage_id);
    }
  }

  //create fields
  $field_files = $source->listAll('field.field.media');
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_files as $field_yml) {
    $field_id = str_replace('field.field.','',$field_yml);
    if (!$field_config->load($field_id)) 
    {
      $field_config_yml = $source->read($field_yml);
      $field_config->create($field_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field: '.  $field_id);
    }
  }


  //create entity form
  $entity_form_files = $source->listAll('core.entity_form_display.media');
  $entity_form = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  foreach ($entity_form_files as $entity_form_yml) {
    $entity_form_id = str_replace('core.entity_form_display.','',$entity_form_yml); 
    $org_entity_form = $entity_form->load($entity_form_id);
    if (empty($org_entity_form))
    {
      $form_display_yml = $source->read($entity_form_yml);
      $entity_form->create($form_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create form: '.  $entity_form_id);
    }
  }

  //create entity views
  $entity_view_files = $source->listAll('core.entity_view_display.media');
  $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  foreach ($entity_view_files as $view_yml) {
    $view_display_id = str_replace('core.entity_view_display.','',$view_yml); 
    $org_view_display = $view_display->load($view_display_id);
    if (empty($org_view_display))
    {
      $view_display_yml = $source->read($view_yml);
      $view_display->create($view_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create view display: '.  $view_display_id);
    }
  }
  
}

/**
 *  create new media type SciTalk Adaptive Streaming
 */
function scitalk_media_update_8103() {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'scitalk_media') . '/config/install';
  $source      = new FileStorage($config_path);

    //create DOI media type
    $media_type_files = $source->listAll('media.type');
    $media_type = \Drupal::entityTypeManager()->getStorage('media_type');
    foreach ($media_type_files as $media_type_yml) {
      $media_type_id = str_replace('media.type.','',$media_type_yml);
      if (!$media_type->load($media_type_id))
      {
        $media_type_yml = $source->read($media_type_yml);
        $media_type->create($media_type_yml)->save();
        \Drupal::logger('scitalk_media')->notice('Create media type for '.  $media_type_id);
      }
    }

  //save field storages
  $field_storage_files = $source->listAll('field.storage');
  $storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_files as $field_storage_yml) {
    $field_storage_id = str_replace('field.storage.','',$field_storage_yml);
    if (!$storage_config->load($field_storage_id))
    {
      $storage_config_yml = $source->read($field_storage_yml);
      $storage_config->create($storage_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field storage: '.  $field_storage_id);
    }
  }

  //create fields
  $field_files = $source->listAll('field.field.media');
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_files as $field_yml) {
    $field_id = str_replace('field.field.','',$field_yml);
    if (!$field_config->load($field_id))
    {
      $field_config_yml = $source->read($field_yml);
      $field_config->create($field_config_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create media type field: '.  $field_id);
    }
  }


  //create entity form
  $entity_form_files = $source->listAll('core.entity_form_display.media');
  $entity_form = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  foreach ($entity_form_files as $entity_form_yml) {
    $entity_form_id = str_replace('core.entity_form_display.','',$entity_form_yml);
    $org_entity_form = $entity_form->load($entity_form_id);
    if (empty($org_entity_form))
    {
      $form_display_yml = $source->read($entity_form_yml);
      $entity_form->create($form_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create form: '.  $entity_form_id);
    }
  }

  //create entity views
  $entity_view_files = $source->listAll('core.entity_view_display.media');
  $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  foreach ($entity_view_files as $view_yml) {
    $view_display_id = str_replace('core.entity_view_display.','',$view_yml);
    $org_view_display = $view_display->load($view_display_id);
    if (empty($org_view_display))
    {
      $view_display_yml = $source->read($view_yml);
      $view_display->create($view_display_yml)->save();
      \Drupal::logger('scitalk_media')->notice('Create view display: '.  $view_display_id);
    }
  }

  //update in scitalk_base module, the Talk Video field to include Adaptive Streaming Video
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'scitalk_base') . '/config/install';
  $source      = new FileStorage($config_path);

  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  $field_yml = 'field.field.node.talk.field_talk_video';
  $field_id = 'node.talk.field_talk_video';
  $loaded_field_config = $field_config->load($field_id);
  if (!empty($loaded_field_config)) {
      $field_config_yml = $source->read($field_yml);
      $entity = $field_config->updateFromStorageRecord($loaded_field_config, $field_config_yml);
      $entity->save();
      \Drupal::logger('scitalk_base')->notice('Updated Video field for Talks');
  }
}